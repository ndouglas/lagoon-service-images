apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: amazeeio-openshift-template-mongo
parameters:
  - name: SERVICE_NAME
    description: Name of this service
    required: true
  - name: SAFE_BRANCH
    description: Which branch this belongs to, special chars replaced with dashes
    required: true
  - name: SAFE_SITEGROUP
    description: Which sitegroup this belongs to, special chars replaced with dashes
    required: true
  - name: BRANCH
    description: Which branch this belongs to, original value
    required: true
  - name: SITEGROUP
    description: Which sitegroup this belongs to, original value
    required: true
  - name: AMAZEEIO_GIT_SHA
    description: git hash sha of the current deployment
    required: true
  - name: ROUTER_URL
    description: URL of the Router
    required: true
objects:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${SERVICE_NAME}-persistent
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    labels:
      branch: ${SAFE_BRANCH}
      sitegroup: ${SAFE_SITEGROUP}
    name: ${SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      service: ${SERVICE_NAME}
    strategy:
      type: Recreate
      resources: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          service: ${SERVICE_NAME}
          branch: ${SAFE_BRANCH}
          sitegroup: ${SAFE_SITEGROUP}
      spec:
        volumes:
          - name: ${SERVICE_NAME}-persistent
            persistentVolumeClaim:
              claimName: ${SERVICE_NAME}-persistent
        containers:
        - image: ${REGISTRY}/${OPENSHIFT_PROJECT}/${SERVICE_NAME}:latest
          name: ${SERVICE_NAME}
          ports:
          - containerPort: 27017
            protocol: TCP
            readinessProbe:
              tcpSocket:
                port: 27017
              initialDelaySeconds: 15
              timeoutSeconds: 1
          envFrom:
          - configMapRef:
             name: lagoon-env
          volumeMounts:
            - name: ${SERVICE_NAME}-persistent
              mountPath: ${PERSISTENT_STORAGE_PATH}
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${SERVICE_NAME}
        from:
          kind: ImageStreamTag
          name: ${SERVICE_NAME}:latest
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      sitegroup: ${SAFE_SITEGROUP}
    name: ${SERVICE_NAME}
  spec:
    ports:
    - name: 27017-tcp
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      service: ${SERVICE_NAME}
  status:
    loadBalancer: {}
